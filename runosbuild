#!/usr/bin/bash

set -e

MANIFEST=$1
EXPORT=$2
ARCH=${3:-$(arch)}

AIB=../automotive-image-builder/automotive-image-builder

BUILDDIR=_build
mkdir -p $BUILDDIR

# Compose json manifest
$AIB compose --arch=$ARCH $1 $BUILDDIR/manifest.json

# Download referenced files
osbuild --store $BUILDDIR/osbuild_store $BUILDDIR/manifest.json

# Start virtiofs for referenced sources
/usr/libexec/virtiofsd --socket-path=.vsock -o source=$BUILDDIR -o cache=always &
sleep 1

TTY=ttyS0

if [ "$ARCH" == $(arch) ]; then
   QEMU="qemu-kvm"
   QEMU_ARGS="-cpu host"
else
   QEMU="qemu-system-$ARCH"
   if [ "$ARCH" == "aarch64" ]; then
     QEMU_ARGS="--machine virt -cpu cortex-a57"
     TTY=ttyAMA0
   fi
fi


# Run osbuild in qemu
$QEMU $QEMU_ARGS -nographic \
         --kernel vmlinuz.$ARCH \
         -smp $(nproc) \
          -append "root=/dev/vda console=$TTY loglevel=3 export=$EXPORT" \
          -m 2G \
         -drive file=rootfs-$ARCH.erofs,snapshot=on,media=disk,format=raw,if=virtio,id=rootdisk \
         -drive file=var-$ARCH.qcow2,media=disk,format=qcow2,if=virtio,id=vardisk \
         -chardev socket,id=char0,path=.vsock \
         -device vhost-user-fs-pci,queue-size=1024,chardev=char0,tag=host \
         -object memory-backend-file,id=mem,size=2G,mem-path=/dev/shm,share=on \
         -numa node,memdev=mem
