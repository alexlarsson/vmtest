#!/usr/bin/bash

set -e

function cleanup {
  sync
  echo "Shutting down VM"
  echo o > /proc/sysrq-trigger
  sleep 1000
}

trap cleanup EXIT

export PATH=/usr/bin:/usr/sbin

# Mount all "API" filesystems
mount -t proc proc /proc
mount -t sysfs sysfs /sys -o "seclabel"
mount -t tmpfs tmpfs /run -o "mode=0755,size=64m,seclabel"
mount -t tmpfs tmpfs /tmp -o "seclabel"
mount -t cgroup2 none /sys/fs/cgroup -o "seclabel"
mkdir /dev/shm
mount -t tmpfs none /dev/shm

# Make /etc transiently writable
mkdir -p /run/etc/upper /run/etc/work
mount -t overlay overlay -o "lowerdir=/etc,upperdir=/run/etc/upper,workdir=/run/etc/work" /etc

# Mount and initialize /var
mount -t ext4 /dev/vdb /mnt
if ! test -f /mnt/initialized ; then
   echo Initializing /var
   cp -ra /var/* /mnt/
   mount --move /mnt /var
   podman load < /var/container.tar
   rm /var/container.tar
   touch /var/initialized
else
   mount --move /mnt /var
fi

# Parse kernel commandline options
EXPORT=qcow2
RUN=
set -- $(cat /proc/cmdline)
for x in "$@"; do
    case "$x" in
        export=*)
        EXPORT="${x#export=}"
        ;;
        run=*)
        RUN="${x#run=}"
        ;;
    esac
done

# Mount build dir from host
mount -t virtiofs host /mnt/
rm -rf /mnt/.done

# Copy reference sources from host
mkdir -p /var/_build/osbuild_store/sources/org.osbuild.files /var/_build/output
cp -ran /mnt/osbuild_store/sources/org.osbuild.files/* /var/_build/osbuild_store/sources/org.osbuild.files
cp /mnt/manifest.json /var/_build/

if [ "$RUN" != "" ]; then
    $RUN
fi

rm -rf /var/_build/output
mkdir /var/_build/output

# Run osbuild in the automotive-osbuild container
podman run -i -v /dev:/dev -v /mnt:/mnt -v /var:/var --privileged --rm --privileged --workdir /var/_build \
       --pull=never \
       quay.io/centos-sig-automotive/automotive-osbuild \
       \
       osbuild --store osbuild_store --export qcow2 --output-dir /var/_build/output manifest.json

mkdir -p /mnt/output
cd /var/_build/output/
tar cvf /mnt/output.tar .
echo 1 > /mnt/.done
